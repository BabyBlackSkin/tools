name: AutoBuild

permissions:
  contents: write  # 允许创建 release、上传产物等

on:
  push:
    tags:
      - v*  # 当推送以 v 开头的标签时触发，例如 v0.1.0

jobs:
  release:
    name: Build and Release Electron App
    runs-on: ${{ matrix.os }}
    env:
      # Electron 官方镜像源（加速下载）
      ELECTRON_MIRROR: https://npmmirror.com/mirrors/electron/
      ELECTRON_BUILDER_BINARIES_MIRROR: https://npmmirror.com/mirrors/electron-builder-binaries/

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ✅ 缓存 pnpm 依赖（排除 electron）
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            !node_modules/electron
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') || github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # ✅ 安装依赖
      - name: Install Dependencies
        run: |
          npm i -g pnpm
          pnpm store prune
          echo "Using ELECTRON_MIRROR=$ELECTRON_MIRROR"
          pnpm install --frozen-lockfile
          echo "Verifying Electron installation..."
          pnpm exec electron --version || echo "Electron not yet ready."

      # ⚙️ 强制修复 Electron 安装
      - name: Fix Electron Installation
        run: |
          echo "Force reinstalling Electron..."
          rd /s /q node_modules\\electron 2>nul || true
          pnpm install electron@latest --ignore-scripts
          pnpm exec electron --version

      # 🧩 重新编译原生依赖
      - name: Rebuild Native Modules
        run: pnpm exec electron-builder install-app-deps

      # 🪟 Windows 环境设置
      - name: Setup Windows Environment
        if: matrix.os == 'windows-latest'
        run: echo "NODE_OPTIONS=--openssl-legacy-provider" >> $env:GITHUB_ENV

      # 🧱 构建 Electron 应用
      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'
        run: pnpm run build:win

      # 🧹 清理除产物以外的多余文件
      - name: Cleanup Artifacts
        run: npx del-cli "dist_electron/*" "!dist_electron/*.exe" "!dist_electron/*.zip" "!dist_electron/*.yml" "!dist_electron/*.blockmap"

      # 📦 上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist_electron/

      # 🚀 创建 GitHub Release（自动附加构建文件）
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: 'dist_electron/**'
          draft: false
          prerelease: true
