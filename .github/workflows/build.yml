name: AutoBuild  # 工作流的名称

permissions:
  contents: write  # 给予写入仓库内容的权限

on:
  push:
    tags:
      - v*  # 当推送以v开头的标签时触发此工作流

jobs:
  release:
    name: build and release electron app  # 任务名称
    runs-on: ${{ matrix.os }}  # 在matrix.os定义的操作系统上运行

#    if: startsWith(github.ref, 'refs/tags/')  # 只在推送标签时运行 on.push.tags 已经保证了在推送标签时运行

    strategy:
      fail-fast: false  # 如果一个任务失败,其他任务继续运行
      matrix:
#        os: [windows-latest, macos-latest]  # 在Windows和macOS上运行任务
        os: [windows-latest]  # 在Windows和macOS上运行任务

    steps:
      - name: Check out git repository
        uses: actions/checkout@v4  # 检出代码仓库

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # 安装Node.js 18 （这里node环境是能够运行代码的环境）

      - name: Install Dependencies
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile # 安装项目依赖

      # 添加环境变量设置步骤（针对 Windows）
      - name: Setup Windows Environment
        if: matrix.os == 'windows-latest'  # 只在Windows上运行
        run: |
          echo "NODE_OPTIONS=--openssl-legacy-provider" >> $GITHUB_ENV # 构建Windows版应用

      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'  # 只在macOS上运行
        run: pnpm run build:win

#      - name: Build Electron App for macOS
#        if: matrix.os == 'macos-latest'
#        run: |
#          pnpm run build:mac
#          pnpm run build:mac-arm

      - name: Cleanup Artifacts for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npx del-cli "dist_electron/*" "!dist_electron/*.exe" "!dist_electron/*.zip" "!dist_electron/*.yml" "!dist_electron/*.blockmap"

#      - name: Cleanup Artifacts for MacOS
#        if: matrix.os == 'macos-latest'
#        run: |
#          npx del-cli "dist_electron/*" "!dist_electron/*.dmg" "!dist_electron/*.zip" "!dist_electron/*.yml" "!dist_electron/*.blockmap"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist_electron/  # vue-cli-plugin-electron-builder 默认输出到 dist_electron

      - name: Create Release
        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')  # 只在推送标签时创建release
        with:
          files: 'dist_electron/**'
          draft: false
          prerelease: true
