name: AutoBuild

permissions:
  contents: write  # 允许创建 release、上传产物等

on:
  push:
    tags:
      - v*  # 当推送以 v 开头的标签时触发，例如 v0.1.0

jobs:
  release:
    name: Build and Release Electron App
    runs-on: ${{ matrix.os }}
    env:
      # Electron 官方镜像源（加速下载）
      ELECTRON_MIRROR: https://npmmirror.com/mirrors/electron/
      ELECTRON_BUILDER_BINARIES_MIRROR: https://npmmirror.com/mirrors/electron-builder-binaries/

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]  # 你可以在这里加 macos-latest, ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ✅ 缓存 pnpm 依赖（容错且稳定）
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') || github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # ✅ 安装依赖 + Electron 二进制
      - name: Install Dependencies (Force Fix Electron)
        shell: pwsh
        run: |
          npm i -g pnpm
          pnpm store prune
            
          # 安装依赖
          pnpm install

          echo "Force reinstalling Electron..."
          Remove-Item -Recurse -Force node_modules\electron -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force node_modules\.pnpm\electron* -ErrorAction SilentlyContinue

          pnpm add electron@29.0.0 --save-dev --force

          # 手动下载 Electron 二进制
          $ELECTRON_VERSION = "29.0.0"
          $ZIP_PATH = "electron-v$ELECTRON_VERSION-win32-x64.zip"
          $CACHE_DIR = "$env:USERPROFILE\AppData\Local\electron\Cache"
          $DIST_DIR = "node_modules/electron/dist"

          echo "Downloading electron binary..."
          npx electron-download --version=$ELECTRON_VERSION --platform=win32 --arch=x64 --mirror=https://npmmirror.com/mirrors/electron/

          # 确保 dist 目录存在并解压二进制包
          if (!(Test-Path $DIST_DIR)) {
            New-Item -ItemType Directory -Path $DIST_DIR | Out-Null
          }

          $ZIP_SOURCE = Join-Path $CACHE_DIR $ZIP_PATH
          if (Test-Path $ZIP_SOURCE) {
            echo "Extracting electron zip to dist..."
            Expand-Archive -Path $ZIP_SOURCE -DestinationPath $DIST_DIR -Force
          } else {
            echo "ERROR: Electron zip not found in cache path $ZIP_SOURCE"
            exit 1
          }

          # 验证 Electron 可执行文件存在
          if (!(Test-Path "$DIST_DIR/electron.exe")) {
            echo "ERROR: electron.exe missing after extraction!"
            exit 1
          }

          # 验证版本
          npx electron --version

          # 重新编译原生依赖
          pnpm exec electron-builder install-app-deps

      # 重新编译原生模块（如 better-sqlite3）
      - name: Rebuild native modules
        run: |
          pnpm add -D electron-rebuild
          pnpm exec electron-rebuild

      # 设置 Windows 环境（兼容 OpenSSL）
      - name: Setup Windows Environment
        if: matrix.os == 'windows-latest'
        run: echo "NODE_OPTIONS=--openssl-legacy-provider" >> $GITHUB_ENV

      # 构建 Electron 应用
      - name: Build Electron App for Windows
        if: matrix.os == 'windows-latest'
        run: pnpm run build:win

      # 清理除产物以外的多余文件
      - name: Cleanup Artifacts
        run: npx del-cli "dist_electron/*" "!dist_electron/*.exe" "!dist_electron/*.zip" "!dist_electron/*.yml" "!dist_electron/*.blockmap"

      # 上传构建产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist_electron/

      # 创建 GitHub Release（自动附加构建文件）
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: 'dist_electron/**'
          draft: false
          prerelease: true
